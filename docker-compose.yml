version: '3.8'

services:
  postgres_db:
    image: postgres:16-alpine
    container_name: meu_postgres_dev
    environment:
      # Variáveis essenciais do PostgreSQL
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: Carteira-Digital-db
    ports:
      - "5432:5432"
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data

    # HEALTHCHECK: Garante que o banco de dados esteja pronto antes que a API inicie
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  app:
    # Constrói a imagem a partir do Dockerfile no diretório atual
    build: 
      context: . 
      dockerfile: Dockerfile

    container_name: carteira_digital_app

    # Mapeamento de Portas: host:container
    ports:
      - "8080:3000" 

    environment:
      # A URL de conexão usa o nome do serviço (postgres_db) como host
      DATABASE_URL: postgres://root:root@postgres_db:5432/Carteira-Digital-db
      # Você deve adicionar outras variáveis de ambiente necessárias aqui (e.g., JWT_SECRET)
      
    # Depende do DB e só inicia quando o HEALTHCHECK do DB for bem-sucedido
    depends_on:
      postgres_db:
        condition: service_healthy 

    restart: unless-stopped

    # Executa as migrations do Prisma antes de iniciar a aplicação em modo de produção
    command: sh -c "npx prisma migrate deploy && npm run start:prod"

# Volume para persistência dos dados do PostgreSQL
volumes:
  postgres_data: